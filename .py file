import cv2
import mediapipe as mp
import requests
import time

# ESP32 IP address
ESP32_IP = "http://###.##.##.#"  

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(
    static_image_mode=False,
    max_num_hands=1,
    min_detection_confidence=0.7
)
mp_draw = mp.solutions.drawing_utils

# Track last known states of fingers to avoid repeat commands
last_finger_states = [0, 0, 0, 0, 0]  # Thumb, Index, Middle, Ring, Pinky

# List of finger names
finger_names = ['thumb', 'index', 'middle', 'ring', 'pinky']

# Function to send command to ESP32
def send_command(finger, state):
    url = f"{ESP32_IP}/led/{finger}/{state}"
    try:
        response = requests.get(url, timeout=1)
        print(f"Sent {url} â†’ Response: {response.text}")
    except requests.exceptions.RequestException as e:
        print(f"Failed to send command: {finger}/{state} | Error: {e}")

# Function to turn off all LEDs
def turn_off_all_leds():
    for finger in finger_names:
        send_command(finger, 'off')

# Open webcam
cap = cv2.VideoCapture(0)

try:
    while True:
        success, frame = cap.read()
        if not success:
            print("Failed to grab frame.")
            break
        frame = cv2.flip(frame, 1)  # Mirror effect
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        result = hands.process(frame_rgb)

        if result.multi_hand_landmarks:
            hand_landmarks = result.multi_hand_landmarks[0]
            lm_list = []
            for lm in hand_landmarks.landmark:
                h, w, _ = frame.shape
                cx, cy = int(lm.x * w), int(lm.y * h)
                lm_list.append((cx, cy))

            tip_ids = [4, 8, 12, 16, 20]
            fingers = []

            # Thumb - x-coordinate comparison
            if lm_list[tip_ids[0]][0] > lm_list[tip_ids[0] - 1][0]:
                fingers.append(1)
            else:
                fingers.append(0)

            # Other fingers - y-coordinate comparison
            for i in range(1, 5):
                if lm_list[tip_ids[i]][1] < lm_list[tip_ids[i] - 2][1]:
                    fingers.append(1)
                else:
                    fingers.append(0)

            print("Finger states:", fingers)

            # Send only if state has changed
            for i in range(5):
                if fingers[i] != last_finger_states[i]:
                    state = 'on' if fingers[i] == 1 else 'off'
                    send_command(finger_names[i], state)
                    last_finger_states[i] = fingers[i]

            mp_draw.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

        cv2.imshow("Hand Gesture Recognition", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
except KeyboardInterrupt:
    print("\nKeyboard interrupt received. Exiting...")

finally:
    turn_off_all_leds()
    cap.release()
    cv2.destroyAllWindows()
